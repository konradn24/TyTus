import discord
from discord.ext import commands
import asyncio

import database
import guild_logging
import converters

import datetime


class Admins(commands.Cog, name="Administracja serwera"):
    def __init__(self, bot):
        self.bot = bot

    # ------ EVENTS ------
    # on_ready
    @commands.Cog.listener()
    async def on_ready(self):
        print(f"Modu≈Ç {__name__} zosta≈Ç za≈Çadowany")

    # on_raw_reaction_add - when clicking option below task (üëç, üëé, ‚ùå)
    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
        # TODO add emoji :x: processing (deleting task)
        if payload.emoji.name == 'üëç':
            # Load task data & check if it's in database
            database.cursor.execute("SELECT COUNT(taskID), taskID, taskFor, taskForDiscordID, reward, made, channelDiscordID, messageDiscordID, madeByDiscordID "
                                    "FROM guildsAdminTasks WHERE messageDiscordID = %s", (payload.message_id,))
            task = database.cursor.fetchall()[0]
            database.connection.commit()

            if task[0] <= 0:
                print(f"Na serwerze {payload.guild_id} wywo≈Çano {__name__}.on_raw_reaction_add() - wiadomo≈õƒá {payload.message_id} nie jest zadaniem, "
                      f"dlatego nastƒÖpi przerwanie dzia≈Çania procedury...")
                return

            # Check if owner clicked the reaction
            if payload.user_id == self.bot.get_guild(payload.guild_id).owner.id:
                # Load guild from database
                database.cursor.execute("SELECT COUNT(guildID), guildID FROM guilds WHERE guildDiscordID = %s", (payload.guild_id,))
                guild_id = database.cursor.fetchall()[0]
                database.connection.commit()

                if guild_id[0] <= 0:
                    guild_not_found_info = self.bot.get_channel(int(task[6])).send(self.bot.db_guild_not_found_info + ". *Czyszczenie wiadomo≈õci za 15 sekund...*")
                    await guild_not_found_info.delete(delay=15.0)
                    print(self.bot.db_guild_not_found_console.format(self.bot.get_guild(payload.guild_id).name, payload.guild_id))
                    return

                guild_id = int(guild_id[1])

                # Check if "made" is not 2 (approved by owner). If "made" is 0 (not done yet), ask if owner is sure to approve task just now before it's even done
                if task[5] == 2:
                    print(f"Na serwerze {payload.guild_id} wywo≈Çano {__name__}.on_raw_reaction_add() - u≈ºytkownik {payload.user_id} (w≈Ça≈õciciel serwera) pr√≥bowa≈Ç zaakceptowaƒá zadanie, jednak 'made' "
                          f"aktualnie wynosi 2 (zadanie zaakceptowane przez w≈Ça≈õciciela)")
                    return
                elif task[5] == 0:
                    is_sure_message = await self.bot.get_channel(payload.channel_id).send(content=":question: Czy na pewno chcesz ju≈º teraz zaakceptowaƒá wykonanie tego zadania, pomimo, "
                                                                                                  "≈ºe nie zosta≈Ço ono jeszcze oznaczone jako wykonane i nie oczekuje na weryfikacjƒô? "
                                                                                                  "(:white_check_mark: / :x:)")
                    await is_sure_message.add_reaction('‚úÖ')
                    await is_sure_message.add_reaction('‚ùå')

                    def check_reaction(r, u):
                        return u == self.bot.get_user(payload.user_id) and str(r.emoji) in ['‚úÖ', '‚ùå']

                    try:
                        is_sure_reaction, is_sure_user = await self.bot.wait_for('reaction_add', check=check_reaction, timeout=60.0)
                        if str(is_sure_reaction.emoji) == '‚ùå':
                            is_sure_canceled_message = await self.bot.get_channel(payload.channel_id).send(":red_circle: Anulowano! *Czyszczenie wiadomo≈õci za 10 sekund...*")
                            await is_sure_message.delete(delay=10.0)
                            await is_sure_canceled_message.delete(delay=10.0)
                            return
                    except asyncio.TimeoutError:
                        err = await self.bot.get_channel(payload.channel_id).send(
                            f":hourglass: {self.bot.get_user(payload.user_id).mention}, minƒÖ≈Ç czas oczekiwania na reakcjƒô. Spr√≥buj ponownie, lecz tym razem siƒô po≈õpiesz! "
                            f"*Czyszczenie wiadomo≈õci za 10 sekund...*")
                        await err.delete(delay=10.0)
                        await is_sure_message.delete(delay=10.0)
                        return

                    await is_sure_message.delete()

                    # Proceed when task was for role (so no one made task and no one gets points)
                    if task[2] == 'role':
                        database.cursor.execute("UPDATE guildsAdminTasks SET made = 2 WHERE taskID = %s", (int(task[1]),))
                        database.connection.commit()

                        text_channels = self.bot.get_guild(payload.guild_id).text_channels

                        for text_channel in text_channels:
                            if text_channel.id == int(task[6]):
                                task_message = await text_channel.fetch_message(int(task[7]))
                                break

                        embed = task_message.embeds[0]
                        embed.set_field_at(3, name="Stan:", value=f"üèÜ Zrobione i zweryfikowane (nikomu nie przyznano punkt√≥w) {datetime.date.today().strftime('%d.%m.%Y')}", inline=False)

                        await task_message.edit(embed=embed)
                        await task_message.clear_reactions()

                        await guild_logging.notification(f"Zadanie {task[1]} zosta≈Ço przedwcze≈õnie zweryfikowane przez w≈Ça≈õciciela serwera")
                        print(f"Zadanie {task[1]} zosta≈Ço przedwcze≈õnie zweryfikowane przez w≈Ça≈õciciela serwera")

                        return

                # Save changes to database (change "made" from 0/1 to 2 - approved by owner)
                database.cursor.execute("UPDATE guildsAdminTasks SET made = 2 WHERE taskID = %s", (int(task[1]),))
                database.connection.commit()

                # Get current admin's statistics
                database.cursor.execute("SELECT adminsStats.adminID, adminsStats.points, adminsStats.madeTasks FROM adminsStats, guildsAdmins "
                                        "WHERE guildsAdmins.adminID = adminsStats.adminID AND guildsAdmins.userDiscordID = %s AND guildsAdmins.guildID = %s", (int(task[8]), guild_id))
                admin_stats = database.cursor.fetchall()[0]
                database.connection.commit()

                # Update admin's statistics (add points & made tasks)
                admin_points = admin_stats[1] + task[4]
                admin_made_tasks = admin_stats[2] + 1

                database.cursor.execute("UPDATE adminsStats SET points = %s, madeTasks = %s WHERE adminID = %s", (admin_points, admin_made_tasks, admin_stats[0]))
                database.connection.commit()

                await self.bot.get_user(int(task[8])).send(f"Twoje zadanie zosta≈Ço zweryfikowane! Otrzymujesz {task[4]} punkty/√≥w :partying_face:")

                # Update task message embed
                text_channels = self.bot.get_guild(payload.guild_id).text_channels

                for text_channel in text_channels:
                    if text_channel.id == int(task[6]):
                        task_message = await text_channel.fetch_message(int(task[7]))
                        break

                embed = task_message.embeds[0]
                embed.set_field_at(3, name="Stan:", value=f"üèÜ Zrobione i zweryfikowane {datetime.date.today().strftime('%d.%m.%Y')}" if task[2] == 'user' else f"üèÜ Zrobione przez {self.bot.get_user(int(task[8])).mention} i zweryfikowane {datetime.date.today().strftime('%d.%m.%Y')}", inline=False)

                await task_message.edit(embed=embed)
                await task_message.clear_reactions()

                # Log
                await guild_logging.notification(f"Zadanie {task[1]} zosta≈Ço zweryfikowane przez w≈Ça≈õciciela serwera")
                print(f"Zadanie {task[1]} zosta≈Ço zweryfikowane przez w≈Ça≈õciciela serwera")

                return

            # Check if user is permitted to take action with the task
            if task[2] == 'user':
                if payload.user_id != int(task[3]):
                    print(f"Na serwerze {payload.guild_id} wywo≈Çano {__name__}.on_raw_reaction_add() - u≈ºytkownik {payload.user_id} nie jest uprawniony do oznaczania zadania "
                          f"{task[1]} jako wykonane, dlatego nastƒÖpi przerwanie dzia≈Çania procedury (taskFor='user')...")
                    return
            elif self.bot.get_guild(payload.guild_id).get_role(int(task[3])) not in self.bot.get_guild(payload.guild_id).get_member(payload.user_id).roles:
                print(f"Na serwerze {payload.guild_id} wywo≈Çano {__name__}.on_raw_reaction_add() - u≈ºytkownik {payload.user_id} nie jest uprawniony do oznaczania zadania "
                      f"{task[1]} jako wykonane, dlatego nastƒÖpi przerwanie dzia≈Çania procedury (taskFor='role')...")
                return

            # Check if task's "made" is already 1 or 2 (if it's already waiting for owner's approval or it has been already approved)
            if task[5] != 0:
                print(f"Na serwerze {payload.guild_id} wywo≈Çano {__name__}.on_raw_reaction_add() - nie mo≈ºna oznaczyƒá zadania jako czekajƒÖce na weryfikacjƒô, gdy≈º 'made' aktualnie wynosi {task[5]}")
                return

            # Save changes to database (change "made" from 0 to 1 - waiting for owner's approval)
            database.cursor.execute("UPDATE guildsAdminTasks SET made = 1 WHERE taskID = %s" if task[2] == 'user' else f"UPDATE guildsAdminTasks SET made = 1, madeByDiscordID = '{payload.user_id}' "
                                                                                                                       f"WHERE taskID = %s", (int(task[1]),))
            database.connection.commit()

            # Update task message embed
            text_channels = self.bot.get_guild(payload.guild_id).text_channels

            for text_channel in text_channels:
                if text_channel.id == int(task[6]):
                    task_message = await text_channel.fetch_message(int(task[7]))
                    break

            embed = task_message.embeds[0]
            embed.set_field_at(3, name="Stan:", value=f"Zrobione ‚ùì oczekiwanie na weryfikacjƒô przez {self.bot.get_guild(payload.guild_id).owner.mention}..." if task[2] == 'user' else f"Zrobione przez {self.bot.get_user(payload.user_id).mention} ‚ùì oczekiwanie na weryfikacjƒô przez {self.bot.get_guild(payload.guild_id).owner.mention}...", inline=False)

            await task_message.edit(embed=embed)
            await task_message.clear_reaction('‚ùå')
            await task_message.add_reaction('üëé')
            await task_message.add_reaction('‚ùå')

            # Log
            await guild_logging.notification(f"Zadanie {task[1]} zosta≈Ço oznaczone jako oczekujƒÖce na weryfikacjƒô przez w≈Ça≈õciciela serwera")
            print(f"Zadanie {task[1]} zosta≈Ço oznaczone jako oczekujƒÖce na weryfikacjƒô przez w≈Ça≈õciciela serwera")

        elif payload.emoji.name == 'üëé':
            # Load task data & check if it's in database
            database.cursor.execute("SELECT COUNT(taskID), taskID, taskFor, taskForDiscordID, reward, made, channelDiscordID, messageDiscordID, madeByDiscordID "
                                    "FROM guildsAdminTasks WHERE messageDiscordID = %s", (payload.message_id,))
            task = database.cursor.fetchall()[0]
            database.connection.commit()

            if task[0] <= 0:
                print(f"Na serwerze {payload.guild_id} wywo≈Çano {__name__}.on_raw_reaction_add() - wiadomo≈õƒá {payload.message_id} nie jest zadaniem, "
                      f"dlatego nastƒÖpi przerwanie dzia≈Çania procedury...")
                return

            # Check if owner clicked the reaction
            if payload.user_id != self.bot.get_guild(payload.guild_id).owner.id:
                print(f"Na serwerze {payload.guild_id} wywo≈Çano {__name__}.on_raw_reaction_add() - nie mo≈ºna odrzuciƒá wykonania zadania, poniewa≈º u≈ºytkownik nie jest w≈Ça≈õcicielem serwera, "
                      f"dlatego nastƒÖpi przerwanie dzia≈Çania procedury...")
                return

            # Check if "made" is 1 (waiting for approve by owner)
            if task[5] != 1:
                print(f"Na serwerze {payload.guild_id} wywo≈Çano {__name__}.on_raw_reaction_add() - nie mo≈ºna odrzuciƒá wykonania zadania, poniewa≈º 'made' aktualnie wynosi {task[5]}, "
                      f"dlatego nastƒÖpi przerwanie dzia≈Çania procedury...")
                return

            # Save changes to database (change "made" from 1 to 0 - not done, waiting for mark as waiting for owner's approval)
            database.cursor.execute("UPDATE guildsAdminTasks SET made = 0 WHERE taskID = %s" if task[2] == 'user' else f"UPDATE guildsAdminTasks SET made = 0, madeByDiscordID = 'NONE' "
                                                                                                                       f"WHERE taskID = %s", (int(task[1]),))
            database.connection.commit()

            # Update task message embed
            text_channels = self.bot.get_guild(payload.guild_id).text_channels

            for text_channel in text_channels:
                if text_channel.id == int(task[6]):
                    task_message = await text_channel.fetch_message(int(task[7]))
                    break

            embed = task_message.embeds[0]
            embed.set_field_at(3, name="Stan:", value="Oczekiwanie na wykonanie zadania (poprzednie wykonanie zosta≈Ço odrzucone przez w≈Ça≈õciciela serwera) - reakcja üëç...", inline=False)

            await task_message.edit(embed=embed)
            await task_message.clear_reaction('üëé')

            # Send info to user who made the task
            await self.bot.get_user(int(task[8])).send(f":postbox: Twoje wykonanie zadania na serwerze *{self.bot.get_guild(payload.guild_id).name}* zosta≈Ço odrzucone przez w≈Ça≈õciciela serwera. "
                                                 f"Byƒá mo≈ºe co≈õ zosta≈Ço zrobione nie tak...?")

            # Log
            await guild_logging.notification(f"Wykonanie zadania {task[1]} zosta≈Ço odrzucone przez w≈Ça≈õciciela serwera")
            print(f"Wykonanie zadania {task[1]} zosta≈Ço odrzucone przez w≈Ça≈õciciela serwera")

        elif payload.emoji.name == "‚ùå":
            # Load task data & check if it's in database
            database.cursor.execute("SELECT COUNT(taskID), taskID, messageDiscordID, content, channelDiscordID "
                                    "FROM guildsAdminTasks WHERE messageDiscordID = %s", (payload.message_id,))
            task = database.cursor.fetchall()[0]
            database.connection.commit()

            if task[0] <= 0:
                print(f"Na serwerze {payload.guild_id} wywo≈Çano {__name__}.on_raw_reaction_add() - wiadomo≈õƒá {payload.message_id} nie jest zadaniem, "
                      f"dlatego nastƒÖpi przerwanie dzia≈Çania procedury...")
                return

            # Check if owner clicked the reaction
            if payload.user_id != self.bot.get_guild(payload.guild_id).owner.id:
                print(f"Na serwerze {payload.guild_id} wywo≈Çano {__name__}.on_raw_reaction_add() - nie mo≈ºna usunƒÖƒá zadania, poniewa≈º u≈ºytkownik nie jest w≈Ça≈õcicielem serwera, "
                      f"dlatego nastƒÖpi przerwanie dzia≈Çania procedury...")
                return

            # Ask if owner is sure to delete the task
            is_sure_message = await self.bot.get_channel(payload.channel_id).send(content=":question: Czy na pewno chcesz usunƒÖƒá to zadanie? Je≈õli punkty sƒÖ ju≈º przyznane, to nie zostanƒÖ odebrane "
                                                                                          "(:white_check_mark: / :x:)")
            await is_sure_message.add_reaction('‚úÖ')
            await is_sure_message.add_reaction('‚ùå')

            def check_reaction(r, u):
                return u == self.bot.get_user(payload.user_id) and str(r.emoji) in ['‚úÖ', '‚ùå']

            try:
                is_sure_reaction, is_sure_user = await self.bot.wait_for('reaction_add', check=check_reaction, timeout=60.0)
                if str(is_sure_reaction.emoji) == '‚ùå':
                    is_sure_canceled_message = await self.bot.get_channel(payload.channel_id).send(":red_circle: Anulowano! *Czyszczenie wiadomo≈õci za 10 sekund...*")
                    await is_sure_message.delete(delay=10.0)
                    await is_sure_canceled_message.delete(delay=10.0)
                    return
            except asyncio.TimeoutError:
                err = await self.bot.get_channel(payload.channel_id).send(
                    f":hourglass: {self.bot.get_user(payload.user_id).mention}, minƒÖ≈Ç czas oczekiwania na reakcjƒô. Spr√≥buj ponownie, lecz tym razem siƒô po≈õpiesz! "
                    f"*Czyszczenie wiadomo≈õci za 10 sekund...*")
                await err.delete(delay=10.0)
                await is_sure_message.delete(delay=10.0)
                return

            await is_sure_message.delete()

            # Load & delete task message
            text_channels = self.bot.get_guild(payload.guild_id).text_channels

            for text_channel in text_channels:
                if text_channel.id == int(task[4]):
                    task_message = await text_channel.fetch_message(int(task[2]))
                    break

            await task_message.delete()

            # Delete task in database
            database.cursor.execute("DELETE FROM guildsAdminTasks WHERE taskID = %s", (task[1],))
            database.connection.commit()

            await self.bot.get_guild(payload.guild_id).owner.send(f"Pomy≈õlnie usuniƒôto zadanie *{task[3][:50]}*{'...' if len(task[3]) > 50 else ''}")

            await guild_logging.notification(f"Na serwerze {self.bot.get_guild(payload.guild_id).name} usuniƒôto zadanie o ID {task[1]}")
            print(f"Na serwerze {self.bot.get_guild(payload.guild_id).name} usuniƒôto zadanie o ID {task[1]}")

    # ------ COMMANDS ------
    # adminProfile
    @commands.command(name="adminProfile", usage="<u≈ºytkownik>", description="Wy≈õwietla statystyki (punkty za zadania, ilo≈õƒá wykonanych, itp.) podanego u≈ºytkownika, o ile zosta≈Ç on wcze≈õniej zapisany"
                                                                             " jako administrator. Przyk≈Çad: **t!adminProfile @ktos123**")
    @commands.guild_only()
    async def admin_profile(self, ctx: commands.Context, user: discord.User = None):
        if user is None:
            user = ctx.author

        # Load guild from database
        database.cursor.execute("SELECT COUNT(guildID), guildID FROM guilds WHERE guildDiscordID = %s", (ctx.guild.id,))
        guild_id = database.cursor.fetchall()[0]
        database.connection.commit()

        if guild_id[0] < 1:
            await ctx.send(self.bot.db_guild_not_found_info)
            print(self.bot.db_guild_not_found_console.format(ctx.guild.name, ctx.guild.id))
            return

        guild_id = int(guild_id[1])

        # Check if user which triggered command is saved as admin on this guild
        database.cursor.execute("SELECT COUNT(adminID) FROM guildsAdmins WHERE guildID = %s AND userDiscordID = %s", (guild_id, ctx.author.id))
        is_admin = database.cursor.fetchall()[0][0]
        database.connection.commit()

        if is_admin < 1:
            await ctx.send(":lock: Nie masz uprawnie≈Ñ do u≈ºycia tego polecenia! Musisz byƒá oznaczony jako admin na tym serwerze (posiadajƒÖc odpowiedniƒÖ rolƒô lub poprzez polecenie **t!addAdmin**)")
            print(f"U≈ºytkownik {ctx.author.name} ({ctx.author.id}) nie mo≈ºe u≈ºyƒá polecenia adminProfile, gdy≈º nie jest oznaczony jako admin serwera {ctx.guild.name} ({ctx.guild.id})")
            return

        # Load admin & his stats from database
        database.cursor.execute("SELECT COUNT(guildsAdmins.adminID), guildsAdmins.adminID, guildsAdmins.canCreateTask, "
                                "adminsStats.points, adminsStats.madeTasks, adminsStats.failedTasks, adminsStats.warns FROM guildsAdmins, adminsStats "
                                "WHERE guildsAdmins.adminID = adminsStats.adminID AND guildsAdmins.guildID = %s AND guildsAdmins.userDiscordID = %s", (guild_id, user.id))
        profile = database.cursor.fetchall()[0]
        database.connection.commit()

        if profile[0] < 1:
            await ctx.send(":face_with_monocle: Nie znaleziono profilu admina tego u≈ºytkownika! "
                           "Mo≈ºna oznaczyƒá go jako administratora poprzez nadanie mu odpowiedniej roli (wcze≈õniej ustawionej poleceniem **t!setAdminRole**) lub komendƒÖ **t!addAdmin**")
            print(f"Nie znaleziono profilu admina u≈ºytkownika {user.name} ({user.id}) na serwerze {ctx.guild.name} ({ctx.guild.id})")
            return

        # Basic info
        admin_id = profile[1]
        warns = profile[6]
        can_create_tasks = profile[2]

        # Tasks info
        points = profile[3]
        made = profile[4]
        failed = profile[5]

        # Create & send embed
        embed = discord.Embed(
            title="**TYTUSOWY PROFIL ADMINA**",
            description=f"Dla u≈ºytkownika {user.mention} (w≈Ça≈õciciel serwera)" if ctx.guild.owner.id == user.id else f"Dla u≈ºytkownika {user.mention}",
            color=discord.Color.random()
        )

        embed.add_field(name="Identyfikator", value=admin_id, inline=True)
        embed.add_field(name="Ostrze≈ºenia (warn'y)", value=warns, inline=True)
        embed.add_field(name="Czy mo≈ºe tworzyƒá zadania?", value="tak" if can_create_tasks >= 1 or ctx.guild.owner.id == user.id else "nie", inline=True)
        embed.add_field(name="Punkty", value=points, inline=True)
        embed.add_field(name="Wykonane zadania", value=made, inline=True)
        embed.add_field(name="Niewykonane zadania", value=failed, inline=True)

        date = datetime.datetime.now()
        embed.set_footer(text=f"TyTus ¬© {date.year}")

        await ctx.send(embed=embed)

    # addAdmin
    @commands.command(name="addAdmin", usage="<u≈ºytkownik> [czy mo≈ºe dodawaƒá zadania? yes / no]", description="Zapisuje podanego u≈ºytkownika jako administratora serwera. __Uwaga: nie wp≈Çynie to na"
                                                                                                              " jego uprawnienia czy role, dodaje tylko mo≈ºliwo≈õƒá uczestnictwa w zadaniach dla "
                                                                                                              "administracji__. Przyk≈Çad: **t!addAdmin @ktos123 no**")
    @commands.guild_only()
    @commands.has_guild_permissions(administrator=True)
    async def add_admin(self, ctx: commands.Context, user: discord.User, can_create_task: converters.to_mysql_boolean = "no"):
        # Get guild from db
        database.cursor.execute("SELECT COUNT(guildID), guildID FROM guilds WHERE guildDiscordID = %s", (ctx.guild.id,))
        guild_id = database.cursor.fetchall()[0]
        database.connection.commit()

        # Check if guild exists in db
        if guild_id[0] <= 0:
            await ctx.send(self.bot.db_guild_not_found_info)
            print(self.bot.db_guild_not_found_console.format(ctx.guild.name, ctx.guild.id))
            return

        guild_id = guild_id[1]

        # Get the admin's profile
        database.cursor.execute("SELECT COUNT(adminID), adminID FROM guildsAdmins WHERE guildID = %s AND userDiscordID = %s", (guild_id, user.id))
        admin = database.cursor.fetchall()[0]
        database.connection.commit()

        # Check if the admin's profile already exists
        if admin[0] >= 1:
            await ctx.send(":thumbsup: Ten u≈ºytkownik jest ju≈º zapisany jako administrator. Je≈õli chcesz to zmieniƒá, wprowad≈∫ **t!removeAdmin <u≈ºytkownik> [pow√≥d]**")
            await guild_logging.notification(f"Pr√≥bowano ponownie dodaƒá administratora o ID {admin[1]}")
            return

        # Create admin's profile
        database.cursor.execute("INSERT INTO guildsAdmins (guildID, userDiscordID, canCreateTask) VALUES (%s, %s, %s)", (guild_id, user.id, can_create_task))
        database.connection.commit()

        # Get created profile's id
        database.cursor.execute("SELECT adminID FROM guildsAdmins ORDER BY adminID DESC LIMIT 1")
        adminID = database.cursor.fetchall()[0][0]
        database.connection.commit()

        # Create admin's statistics profile
        database.cursor.execute("INSERT INTO adminsStats (adminID, points, madeTasks, failedTasks, warns) VALUES (%s, 0, 0, 0, 0)", (adminID,))
        database.connection.commit()

        await ctx.send(f":white_check_mark: Pomy≈õlnie dodano *{user.display_name}* jako administratora tego serwera")
        await guild_logging.notification(f"Nowy administrator ({user.display_name}, {user.id}) na serwerze {ctx.guild.name} ({ctx.guild.id})")

    # removeAdmin
    @commands.command(name="removeAdmin", usage="<u≈ºytkownik> [pow√≥d]", description="Usuwa tytu≈Ç administratora podanemu u≈ºytkownikowi. Dodatkowy parametr \"pow√≥d\" zostanie wys≈Çany do niego "
                                                                                    "automatycznie za pomocƒÖ bota. __Uwaga: nie wp≈Çynie to na jego uprawnienia czy role, lecz "
                                                                                    "odbierze mu mo≈ºliwo≈õƒá uczestnictwa w zadaniach dla administracji__. Przyk≈Çad: **t!removeAdmin @ktos123 Zmiana "
                                                                                    "admina, pa pa!**")
    @commands.guild_only()
    @commands.has_guild_permissions(administrator=True)
    async def remove_admin(self, ctx: commands.Context, user: discord.User, *, reason: str = None):
        # Load guild from database
        database.cursor.execute("SELECT COUNT(guildID), guildID FROM guilds WHERE guildDiscordID = %s", (ctx.guild.id,))
        guild_id = database.cursor.fetchall()[0]
        database.connection.commit()

        if guild_id[0] < 1:
            await ctx.send(self.bot.db_guild_not_found_info)
            print(f"Nie mo≈ºna usunƒÖƒá admina {user.name} ({user.id}), poniewa≈º nie odnaleziono serwera {ctx.guild.name} ({ctx.guild.id}) w bazie danych")
            return

        guild_id = int(guild_id[1])

        # Check if the admin to delete exists
        database.cursor.execute("SELECT COUNT(adminID), adminID FROM guildsAdmins WHERE guildID = %s AND userDiscordID = %s", (guild_id, user.id))
        admin_id = database.cursor.fetchall()[0]
        database.connection.commit()

        if admin_id[0] < 1:
            await ctx.send(f":face_with_monocle: Podany u≈ºytkownik nie jest zapisany jako administrator tego serwera!")
            print(f"Nie mo≈ºna usunƒÖƒá administratora {user.name} ({user.id}) na serwerze {ctx.guild.name} ({ctx.guild.id}), gdy≈º ten u≈ºytkownik nim nie jest")
            return

        admin_id = int(admin_id[1])

        # Delete admin & his stats
        database.cursor.execute("DELETE FROM guildsAdmins WHERE adminID = %s", (admin_id,))
        database.connection.commit()

        print(f"Usuniƒôto rekord z tabeli 'guildsAdmins' o adminID {admin_id} (usuwanie admina cz. 1/2)...")

        database.cursor.execute("DELETE FROM adminsStats WHERE adminID = %s", (admin_id,))
        database.connection.commit()

        # Send logs
        await guild_logging.notification(f"Usuniƒôto wszystkie dane profilu admina (ID {admin_id}) u≈ºytkownika {user.name} ({user.id})")
        print(f"Usuniƒôto rekord z tabeli 'adminsStats' o adminID {admin_id} (usuwanie admina cz. 2/2). Zako≈Ñczono!")

        await ctx.send(f":white_check_mark: *{user.display_name}* nie jest ju≈º administratorem tego serwera. "
                       f"Jego Discord'owe uprawnienia nie uleg≈Çy zmianie, lecz nie bƒôdzie m√≥g≈Ç on uczestniczyƒá w zadaniach dla administracji.")

        if reason is None:
            reason = "**nie okre≈õlono**"

        await user.send(f":grey_exclamation: Na serwerze *{ctx.guild.name}* odebrano Ci tytu≈Ç administratora. Pow√≥d: " + reason + "")

    # adminLeaderboard
    @commands.command(name="adminLeaderboard", usage="[ilo≈õƒá wierszy]", description="Wy≈õwietla ranking admin√≥w pod wzglƒôdem punkt√≥w. Dodatkowy parametr okre≈õla ilo≈õƒá wierszy (np. podajƒÖc 4 uzyskamy "
                                                                                    "TOP 4 admin√≥w, a podajƒÖc 20 - TOP 20), kt√≥ra domy≈õlnie wynosi 10. Przyk≈Çad: **t!adminLeaderboard 3**")
    @commands.guild_only()
    async def admin_leaderboard(self, ctx: commands.Context, rows: int = 10):
        # Load guildID from database
        database.cursor.execute("SELECT COUNT(guildID), guildID FROM guilds WHERE guildDiscordID = %s", (ctx.guild.id,))
        guild_id = database.cursor.fetchall()[0]
        database.connection.commit()

        if guild_id[0] < 1:
            await ctx.send(self.bot.db_guild_not_found_info)
            print(self.bot.db_guild_not_found_console.format(ctx.guild.name, ctx.guild.id))
            return

        guild_id = int(guild_id[1])

        # Load top 10 ('rows') admins by points
        database.cursor.execute("SELECT guildsAdmins.userDiscordID, adminsStats.points FROM guildsAdmins, adminsStats WHERE guildsAdmins.adminID = adminsStats.adminID "
                                "ORDER BY adminsStats.points DESC LIMIT %s", (rows,))
        leaderboard = database.cursor.fetchall()
        database.connection.commit()

        if len(leaderboard) < 1:
            await ctx.send(":face_with_monocle: WyglƒÖda na to, ≈ºe nie masz ≈ºadnych TyTusowych admin√≥w na serwerze. Dodaj ich automatycznie poprzez ustawienie odpowiedniej roli (**t!setAdminRole**) "
                           "lub za pomocƒÖ polecenia **t!addAdmin**")
            print(f"Nie mo≈ºna wy≈õwietliƒá rankingu na serwerze {ctx.guild.name} ({ctx.guild.id}), poniewa≈º nie ma tu ≈ºadnych admin√≥w")
            return

        # Create & send embed
        embed = discord.Embed(
            title=f"**TOP {rows} admin√≥w**",
            description=f"Wed≈Çug punkt√≥w za zadania",
            color=discord.Color.random()
        )

        for i, admin in enumerate(leaderboard):
            print(admin[0])

            if ctx.guild.get_member(int(admin[0])) is None:
                continue

            if i == 0:
                embed.add_field(name=f":first_place: **#1** *{ctx.guild.get_member(int(admin[0])).name}*", value=f"Punkty: {admin[1]}", inline=False)
            elif i == 1:
                embed.add_field(name=f":second_place: **#2** *{ctx.guild.get_member(int(admin[0])).name}*", value=f"Punkty: {admin[1]}", inline=False)
            elif i == 2:
                embed.add_field(name=f":third_place: **#3** *{ctx.guild.get_member(int(admin[0])).name}*", value=f"Punkty: {admin[1]}", inline=False)
            else:
                embed.add_field(name=f"**#{i + 1}** *{ctx.guild.get_member(int(admin[0])).name}*", value=f"Punkty: {admin[1]}", inline=False)

        date = datetime.datetime.now()
        embed.set_footer(text=f"TyTus ¬© {date.year}")

        await ctx.send(embed=embed)

    # addTask
    @commands.command(name="addTask", usage="<u≈ºytkownik / rola> <ilo≈õƒá dni> [ilo≈õƒá punkt√≥w]", description="Tworzy nowe zadanie na kanale na kt√≥rym zosta≈Ça wywo≈Çana ta komenda. Tylko podany "
                                                                                                           "podany u≈ºytkownik bƒôdzie m√≥g≈Ç je wykonaƒá (bƒÖd≈∫ te≈º u≈ºytkownicy z podanƒÖ rolƒÖ). Ilo≈õƒá dni "
                                                                                                           "okre≈õla termin na wykonanie zadania. Po wykonaniu, u≈ºytkownik musi wcisnƒÖƒá reakcjƒô "
                                                                                                           ":thumbsup:, po czym w≈Ça≈õciciel serwera musi sprawdziƒá czy zadanie faktycznie zosta≈Ço "
                                                                                                           "zrobione. Nastƒôpnie zatwierdza i punkty zostajƒÖ automatycznie przyznane wykonawcy, lub te≈º "
                                                                                                           "odrzuca i u≈ºytkownik musi je wykonaƒá ponownie. Wprowad≈∫ **t!help admin-tasks**, aby "
                                                                                                           "dowiedzieƒá siƒô wiƒôcej. Przyk≈Çad: **t!addTask @zarzƒÖd 2 5**")
    @commands.guild_only()
    @commands.has_guild_permissions(manage_messages=True)
    async def add_task(self, ctx: commands.Context, task_for: converters.user_or_role, days: int, points: int = 2):
        # Delete message that triggered command
        await ctx.message.delete()

        # Get guild ID & check if it's in database
        database.cursor.execute("SELECT guildID FROM guilds WHERE guildDiscordID = %s", (ctx.guild.id,))
        guild_id = database.cursor.fetchall()
        database.connection.commit()

        if len(guild_id) <= 0:
            err = await ctx.send(f"{self.bot.db_guild_not_found_info} *Czyszczenie wiadomo≈õci za 15 sekund...*")
            await err.delete(delay=15.0)
            print(self.bot.db_guild_not_found_console.format(ctx.guild.name, ctx.guild.id))
            return

        guild_id = guild_id[0][0]
        task_for_id = int(task_for[0])
        task_for = task_for[1]

        # Check if user was saved in database as admin & if has permission to create tasks
        if ctx.author.id != ctx.guild.owner.id:
            database.cursor.execute("SELECT COUNT(adminID), adminID, canCreateTask FROM guildsAdmins WHERE userDiscordID = %s AND guildID = %s", (ctx.author.id, guild_id))
            author_admin_profile = database.cursor.fetchall()[0]
            database.connection.commit()

            if author_admin_profile[0] <= 0:
                err = await ctx.send(":lock: Nie jeste≈õ uprawniony do tworzenia zada≈Ñ (nie zosta≈Çe≈õ oznaczony jako administrator za pomocƒÖ polecenia **t!addAdmin**)! "
                                     "*Czyszczenie wiadomo≈õci za 20 sekund...*")
                await err.delete(delay=20.0)
                print(f"U≈ºytkownik {ctx.author.name} ({ctx.author.id}) nie mo≈ºe utworzyƒá zadania - nie jest w bazie jako administrator")
                return
            elif author_admin_profile[2] != 1:
                err = await ctx.send(":lock: Nie jeste≈õ uprawniony do tworzenia zada≈Ñ (w Twoim profilu admina opcja \"mo≈ºe tworzyƒá zadania?\" jest ustawiona na \"nie\", "
                                     "mo≈ºna to zmieniƒá za pomocƒÖ polecenia **t!editAdminCreateTasks**) *Czyszczenie wiadomo≈õci za 20 sekund...*")
                await err.delete(delay=20.0)
                print(f"U≈ºytkownik {ctx.author.name} (ID admina: {author_admin_profile[1]}) nie mo≈ºe utworzyƒá zadania - 'canCreateTask' aktualnie wynosi {author_admin_profile[2]}")
                return

        # Get task's content from user
        def check_msg_author(m):
            return m.author == ctx.author

        info_1 = await ctx.send(":thumbsup: OK, teraz wprowad≈∫ tre≈õƒá zadania... Wpisz **cancel** aby anulowaƒá")

        try:
            content = await self.bot.wait_for('message', check=check_msg_author, timeout=180.0)
            if content.content == 'cancel':
                info_2 = await ctx.send(":red_circle: Anulowano! *Czyszczenie wiadomo≈õci za 10 sekund...*")
                await info_2.delete(delay=10.0)
                await info_1.delete(delay=10.0)
                await content.delete(delay=10.0)
                return
        except asyncio.TimeoutError:
            err = await ctx.send(f":hourglass: {ctx.author.mention}, minƒÖ≈Ç czas oczekiwania na odpowied≈∫. Spr√≥buj ponownie, lecz tym razem siƒô po≈õpiesz! *Czyszczenie wiadomo≈õci za 10 sekund...*")
            await err.delete(delay=10.0)
            await info_1.delete(delay=10.0)
            return

        # Delete message with task's content
        await content.delete()

        # Create task's embed & ask if it's ok
        embed_color = discord.Color.random()

        embed = discord.Embed(
            title="TyTusowe zadanko",
            description=content.content,
            color=embed_color
        )

        embed.add_field(name="Dla:", value=self.bot.get_user(task_for_id).mention if task_for == 'user' else ctx.guild.get_role(task_for_id).mention, inline=False)
        embed.add_field(name="Pozosta≈Çy czas:", value=f"{days} dni", inline=False)
        embed.add_field(name="Nagroda:", value=f"{points} punkty/√≥w", inline=False)
        embed.add_field(name="Stan:", value="Oczekiwanie na wykonanie zadania - reakcja üëç...", inline=False)

        date = datetime.datetime.now()
        embed.set_footer(text=f"TyTus ¬© {date.year}")

        embed_message = await ctx.send(embed=embed)
        await info_1.edit(content=":question: Czy wszystko siƒô zgadza? (:white_check_mark: / :x:)")
        await info_1.add_reaction('‚úÖ')
        await info_1.add_reaction('‚ùå')

        def check_reaction(r, u):
            return u == ctx.author and str(r.emoji) in ['‚úÖ', '‚ùå']

        try:
            confirm_reaction, confirm_user = await self.bot.wait_for('reaction_add', check=check_reaction, timeout=60.0)
            if str(confirm_reaction.emoji) == '‚ùå':
                info_2 = await ctx.send(":red_circle: Anulowano! *Czyszczenie wiadomo≈õci za 10 sekund...*")
                await info_2.delete(delay=10.0)
                await info_1.delete(delay=10.0)
                await embed_message.delete(delay=10.0)
                return
        except asyncio.TimeoutError:
            err = await ctx.send(f":hourglass: {ctx.author.mention}, minƒÖ≈Ç czas oczekiwania na reakcjƒô. Spr√≥buj ponownie, lecz tym razem siƒô po≈õpiesz! *Czyszczenie wiadomo≈õci za 10 sekund...*")
            await err.delete(delay=10.0)
            await info_1.delete(delay=10.0)
            await embed_message.delete(delay=10.0)
            return

        await info_1.delete()
        await embed_message.add_reaction('üëç')
        await embed_message.add_reaction('‚ùå')

        # Check if task is for user, then check if he's in database as administrator TODO if task is for role, check if everyone with this role is in database as admin, if not - add him/them
        if task_for == "user":
            database.cursor.execute("SELECT COUNT(adminID), adminID FROM guildsAdmins WHERE guildID = %s AND userDiscordID = %s", (guild_id, task_for_id))
            task_for_admin = database.cursor.fetchall()[0]
            database.connection.commit()

            if task_for_admin[0] <= 0:
                await database.add_admin(guild_id, task_for_id, 0)
                await ctx.author.send(f"U≈ºytkownik dla kt√≥rego utworzy≈Çe≈õ zadanie, zosta≈Ç dodany do bazy jako administrator Twojego serwera "
                                      f"(dziƒôki temu mo≈ºe wykonywaƒá zadania, ale jego discord'owe uprawnienia __nie__ uleg≈Çy zmianie). "
                                      f"Je≈õli chcesz zobaczyƒá jego profil, wprowad≈∫ **t!adminProfile <u≈ºytkownik>**")
        else:
            database.cursor.execute("SELECT userDiscordID FROM guildsAdmins WHERE guildID = %s", (guild_id,))
            guild_admins_2d = database.cursor.fetchall()
            database.connection.commit()

            guild_admins = []
            added_to_database = []

            for guild_admin in guild_admins_2d:
                guild_admins.append(int(guild_admin[0]))

            for member in ctx.guild.members:
                for role in member.roles:
                    if role.id == task_for_id:
                        if member.id not in guild_admins:
                            await database.add_admin(guild_id, member.id, 0)
                            added_to_database.append(member.display_name)

            if len(added_to_database) != 0:
                added_to_database_text = ""

                for added_to_database_nick in added_to_database:
                    added_to_database_text = added_to_database_text + added_to_database_nick + ", "

                added_to_database_text = added_to_database_text[:-2]

                nouns_conjugation = ["u≈ºytkownik" if len(added_to_database) == 1 else "u≈ºytkownik√≥w", "zosta≈Ç" if len(added_to_database) == 1 else "zosta≈Ço",
                                     "dodany" if len(added_to_database) == 1 else "dodanych", "administrator" if len(added_to_database) == 1 else "administratorzy",
                                     "mo≈ºe" if len(added_to_database) == 1 else "mogƒÖ", "jego" if len(added_to_database) == 1 else "ich"]
                await ctx.author.send(f"{len(added_to_database)} {nouns_conjugation[0]} (*{added_to_database_text}*) {nouns_conjugation[1]} {nouns_conjugation[2]} "
                                      f"do bazy jako {nouns_conjugation[3]} Twojego serwera (dziƒôki temu {nouns_conjugation[4]} wykonywaƒá zadania, ale {nouns_conjugation[5]} discord'owe uprawnienia "
                                      f"__nie__ uleg≈Çy zmianie).")

        # Insert task record to guildsAdminTasks table
        database.cursor.execute("INSERT INTO guildsAdminTasks (guildID, channelDiscordID, messageDiscordID, taskFor, taskForDiscordID, madeByDiscordID, reward, made, content) "
                                "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
                                (guild_id, ctx.channel.id, embed_message.id, task_for, task_for_id, task_for_id if task_for == 'user' else 'NONE', points, 0, content.content))
        database.connection.commit()

        await ctx.author.send("Zadanie zosta≈Ço pomy≈õlnie utworzone. Wprowad≈∫ **t!help admin-tasks**, ≈ºeby dowiedzieƒá siƒô, do czego s≈Çu≈ºƒÖ poszczeg√≥lne reakcje pod zadaniem")
        await guild_logging.notification(f"Na serwerze {ctx.guild.name} utworzono zadanie. Tre≈õƒá: {content.content}")
        print(f"Na serwerze {ctx.guild.name} utworzono zadanie. Tre≈õƒá: {content.content}")


def setup(bot):
    bot.add_cog(Admins(bot))
